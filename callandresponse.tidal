
10:30
12:30 lunch
17:00

https://github.com/yaxu/tidal-workshop



-- A TidalCycles workbook

-- Call and Response workshop run by Alex McLean

-- Adapted from work by Lucy Cheesman, Richard Eason, and Alexandra Cardenas
-- CC BY-SA 4.0 - https://creativecommons.org/licenses/by-sa/4.0/
-- Suggestions and edits/patches welcome

-- Make a sound

d1 $ sound "arpy"

-- Stop making a sound

d1 $ silence

-- Make a different sound

d1 $ sound "drum:1"

-- Where are these sounds coming from?
-- In SuperCollider ..
-- File > Open user support directory > downloaded-quarks > Dirt-Samples

-- Make a step sequence

cps 0.8

d1 $ sound "bd mt cp lt bd bd bd bd"

d2 $ sound "arpy arpy arpy"
d1 silence
-- Add rests

d1 $ sound "bd ~ sn:2 ~ ~ bd sn:2 ~"

-- You're changing a cycle with a fixed duration -- the longer the
-- sequence, the faster it runs

d1 $ sound "bd ~ sn:2 ~ ~ bd sn:2 ~ bd bd bd bd bd bd bd bd"

-- Play more than one cycle at once with d1 .. d9

d2 $ sound "~ arpy:3"

-- Change the fixed cycle duration with cps

cps (120/60)

-- Pause the clock

cps (-1)

-- Silence everything (keep the clock running)

hush

-- Sample number as a separate parameter with n

-- * these are the same

d1 $ sound "arpy:0 arpy:1 arpy:2 arpy:3"

d1 $ sound "arpy" # n "0 1 2 3"

-- Order matters -- patterns of sound vs patterns of n.
-- e.g. you don't need the *4 on the above if you put n first

d1 $ n "0 1 2 3" # sound "arpy drum"

-- Combining with |+|, |*| etc instead of #

-- * # replaces

d1 $ n "0 1 2 3" # sound "arpy"


-- * but |+| adds

d1 $ n "0 1 2 3" # sound "arpy"
  |+| n "0 7"

-- * a preview of slow..

d1 $ n "0 1 2 3" # sound "arpy"
  |+| n (slow 2 "0 7")

-- More parameters

-- * vowel

d1 $ vowel "a e i o" # sound "arpy"

-- * gain

d1 $ gain "1 0.5 1 0.75" # sound "arpy"

-- * crush - bitcrush distortion

d1 $ crush "3 4 5 6 7 8" # sound "arpy"


-- How things align - the start of events in the pattern on the left are matched with the timespan on the right

d1 $ sound "drum drum arpy arpy"
  # n "0 1 4 3"

d1 $ sound "drum drum drum arpy arpy"
  # n "0 1 4 3"

d1 $ sound "drum drum arpy arpy"
  # n "0 1 4"

-- * speed / up

d1 $ sound "drum drum arpy arpy"
  # speed "1 0.5 2"

-- Continuous patterns - sine, saw, tri, rand / choose

-- * sine

d1 $ sound "drum drum drum drum drum drum drum drum"
  # gain (sine + 0.25)

-- * this doesn't work!

d1 $ sound "drum drum drum drum drum drum drum drum"
  # gain (0.25 + sine)

-- * rand

d1 $ sound "drum drum drum drum drum drum drum drum"
  # gain (rand + 0.25)

-- * choose

d1 $ sound "drum drum drum drum drum drum drum drum"
  # speed (choose [0.5, 2, 4])

-- More parameters

-- * accelerate

d1 $ sound "drum drum arpy arpy"
  # accelerate "1 0.5 2"

-- * lpf / lpq

d1 $ sound "drum drum arpy arpy"
  # lpf 1000
  # lpq 0.3

-- (double quotes aren't strictly necessary for single numbers)

d1 $ sound "drum ~ drum drum:2 arpy ~ arpy:3 ~"
  # lpf (sine * 4000 + 500)
  # lpq (slow 4 (sine * 0.3))

-- * hpf / hpq

-- Subpatterns

-- * Fit a subsequence into a step with square brackets:

d1 $ sound "bd [bd cp] bd bd"

-- * This can make for flexible time signatures:

d1 $ sound "[bd bd sn:5] [bd sn:3]"

-- * You can put subsequences inside subsequences:
d1 $ sound "[[bd bd] bd sn:5] [bd sn:3]"

-- * Keep going..
d1 $ sound "[[bd [bd bd bd bd]] bd sn:5] [bd sn:3]"

-- Polymetric / polyrhythmic sequences

-- * Play two subsequences at once by separating with a comma:

d1 $ sound "[voodoo voodoo:3, arpy arpy:4 arpy:2]"

-- * compare how [,] and {,} work:

d1 $ sound "[voodoo voodoo:3, arpy arpy:4 arpy:2]"

d1 $ sound "{voodoo voodoo:3, arpy arpy:4 arpy:2}"

d1 $ sound "[drum bd hh bd, can can:2 can:3 can:4 can:2]"

d1 $ sound "{drum bd hh bd, can can:2 can:3 can:4 can:2}"

d1 $ sound "[bd sn, can:2 can:3 can:1, arpy arpy:1 arpy:2 arpy:3 arpy:5]"

d1 $ sound "{bd sn, can:2 can:3 can:1, arpy arpy:1 arpy:2 arpy:3 arpy:5}"

-- * one per cycle with <>

d1 $ sound "cp <arpy:1 arpy:2 arpy:3>"

-- * elongation with _

d1 $ sound "[bd mt ht] _ [bd mt ht]"

-- * faster with *, slower with /

d1 $ sound "bd*4 cp*3 arpy/2"

-- * Euclidian patterns

d1 $ sound "bd(3,8)"

-- ** (2,5) : A thirteenth century Persian rhythm called Khafif-e-ramal.
-- ** (3,4) : The archetypal pattern of the Cumbia from Colombia, as well as a Calypso rhythm from Trinidad.
-- ** (3,5,2) : Another thirteenth century Persian rhythm by the name of Khafif-e-ramal, as well as a Rumanian folk-dance rhythm.
-- ** (3,7) : A Ruchenitza rhythm used in a Bulgarian folk-dance.
-- ** (3,8) : The Cuban tresillo pattern.
-- ** (4,7) : Another Ruchenitza Bulgarian folk-dance rhythm.
-- ** (4,9) : The Aksak rhythm of Turkey.
-- ** (4,11) : The metric pattern used by Frank Zappa in his piece titled Outside Now.
-- ** (5,6) : Yields the York-Samai pattern, a popular Arab rhythm.
-- ** (5,7) : The Nawakhat pattern, another popular Arab rhythm.
-- ** (5,8) : The Cuban cinquillo pattern.
-- ** (5,9) : A popular Arab rhythm called Agsag-Samai.
-- ** (5,11) : The metric pattern used by Moussorgsky in Pictures at an Exhibition.
-- ** (5,12) : The Venda clapping pattern of a South African childrenâ€™s song.
-- ** (5,16) : The Bossa-Nova rhythm necklace of Brazil.
-- ** (7,8) : A typical rhythm played on the Bendir (frame drum).
-- ** (7,12) : A common West African bell pattern.
-- ** -- ** (7,16,14) : A Samba rhythm necklace from Brazil.
-- ** (9,16) : A rhythm necklace used in the Central African Republic.
-- ** (11,24,14) : A rhythm necklace of the Aka Pygmies of Central Africa.
-- ** (13,24,5) : Another rhythm necklace of the Aka Pygmies of the upper Sangha.

-- Transformations A

-- * fast (density)
-- * slow (sparsity)

-- 'Higher order' transformations that take another transoformation

-- * every
-- * sometimes / rarely / often
-- * someCycles
-- * jux

-- More transformations

-- * rev
-- * beat rotation with <~ and ~>
-- * chop / striate
-- * iter
-- * linger
-- * degrade / degradeBy
-- * stut
-- * weave

-- Patterning parameters - directly and with spread

-- Transitions

-- * anticipate
-- * xfade
-- * ...

-- Composing

-- * stack
-- * seqP / seqPLoop
-- * ur'

-- Synths

-- * sc-plugins

-- Midi

-- Multichannel and multitrack
