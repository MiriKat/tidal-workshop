{-

11th August
5pm-7pm – optional session covering basics of installation and sequencing

12th August
10am-5pm – repetition, symmetry, interference and glitch, ensemble play
from 5pm – potential excursion to peak district for battery-powered group improv

13th August
9:30am-5pm – customisation, multichannel, midi control (external synths), dmx control (lights), visualisation

from 5pm – pub
-}

-- Installation

https://tidalcycles.org/getting_started.html

-- Sequencing

d1 $ sound "bd sd cp sd"

-- Composing effects

d1 $ sound "bd sd cp sd"
   # vowel "a e"

-- Types

:t slow

-- gives: slow :: Pattern Time -> Pattern a -> Pattern a

-- Slow takes a pattern of time, a pattern (of something) and results in a pattern (of that something)

d1 $ slow 2 (sound "arpy arpy:2")

-- We have to wrap that last pattern in brackets so that it gets passed as the second parameter of `slow`.

-- Instead we can do this:

d1 $ slow 2 $ sound "arpy arpy:2"

-- The $ means 'pass everything on the right, to the function on the
-- left'. It saves having to remember to put the closing bracket in.
-- `d1` is a function as well, which takes exactly one pattern, which
-- it sends to the synthesiser. We could do this instead:

d1 (slow 2 (sound "arpy arpy:2"))

-- .. but we'd quickly end up with a lot of closing brackets to keep
-- track of.

-- Earlier we noticed that the first parameter was a *pattern* of
-- time. This means we can pattern it:


d1 $ slow "2 4" $ sound "arpy arpy:2"

-- There are a lot of patterns in the above!
