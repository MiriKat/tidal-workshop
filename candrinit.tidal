import Sound.Tidal.OscStream

{- 
d1 $ jux rev $ stut 4 0.9 "<0.01 0.02 0.01>" $
   chop 8 $ sound "bd(3,8) sn:2"
-}

-- adsfadsf

d1 $ stut "<4 8>" 0.25 (slow 8 $ toRational <$> sine) $ sound "sn:2"

d1 $ randcat [sound "bd",
              sound "sn:1(3,8)"]

let superDirtBackend = do
      s <- makeConnection "192.168.1.90" 57120 superDirtSlang
      return $ Backend s (\_ _ _ -> return ())
    superDirtState = do
      backend <- superDirtBackend
      Sound.Tidal.Stream.state backend dirt
    setters getNow = do ds <- superDirtState
                        return (setter ds, transition getNow ds)
d1 $ silence
(d1,t1) <- setters getNow
(d2,t2) <- setters getNow
(d3,t3) <- setters getNow
(d4,t4) <- setters getNow
(d5,t5) <- setters getNow
(d6,t6) <- setters getNow
(d7,t7) <- setters getNow
(d8,t8) <- setters getNow
(d9,t9) <- setters getNow
(d10,t10) <- setters getNow

let hush = mapM_ ($ silence) [d1,d2,d3,d4,d5,d6,d7,d8,d9,d10]
    solo = (>>) hush
    jux f p = stack [p |+| pan 0.25, f p |+| pan (0.75)]
d1 silence

d1 $ (jux (rev) $ sound "bd(3,8)")
  |+| pan (slow 8 saw)
